
from tkinter import *

def button_press(num):
  global equation_text
  
  equation_text= equation_text+str(num)
  
  equation_label.set(equation_text)
  
def equals():
  global equation_text
  try:
    total=str(eval(equation_text))
    
    equation_label.set(total)
    
    equation_text=total
    
  except zeroDivisionError:
    equation_label.set("arithmetic error")
    
    equation_text=" "
  except SyntaxError:
    equation_label.set("syntax error")
    
    equation_text=" "
def clear():
  global equation_text
  
  equation_label.set("")
  
  equation_text=" "
  
window=Tk()
window.title("calculator")
window.geometry('500x500')

equation_text=" "

equation_label = StringVar()

label=Label(window,textvariable=equation_label,font=('consolas',20),bg="white",width=24,height=2)
label.pack()

frame=Frame(window)
frame.pack()

button1=Button(frame,text=1,height=4,width=9,font=34,command=lambda: button_press(1))
button1.grid(row=0,column=0)
button2=Button(frame,text=2,height=4,width=9,font=34,command=lambda: button_press(2))
button2.grid(row=0,column=1)
button3=Button(frame,text=3,height=4,width=9,font=34,command=lambda: button_press(3))
button3.grid(row=0,column=2)
button4=Button(frame,text=4,height=4,width=9,font=34,command=lambda: button_press(4))
button4.grid(row=1,column=0)
button5=Button(frame,text=5,height=4,width=9,font=34,command=lambda: button_press(5))
button5.grid(row=1,column=1)
button6=Button(frame,text=6,height=4,width=9,font=34,command=lambda: button_press(6))
button6.grid(row=1,column=2)
button7=Button(frame,text=7,height=4,width=9,font=34,command=lambda: button_press(7))
button7.grid(row=2,column=0)
button8=Button(frame,text=8,height=4,width=9,font=34,command=lambda: button_press(8))
button8.grid(row=2,column=1)
button9=Button(frame,text=9,height=4,width=9,font=34,command=lambda: button_press(9))
button9.grid(row=2,column=2)
button0=Button(frame,text=0,height=4,width=9,font=34,command=lambda: button_press(0))
button0.grid(row=3,column=0)
plus=Button(frame,text="+",height=4,width=9,font=34,command=lambda: button_press("+"))
plus.grid(row=0,column=3)
minus=Button(frame,text="-",height=4,width=9,font=34,command=lambda: button_press("-"))
minus.grid(row=1,column=3)
multiply=Button(frame,text="*",height=4,width=9,font=34,command=lambda: button_press("*"))
multiply.grid(row=2,column=3)
divide=Button(frame,text="/",height=4,width=9,font=34,command=lambda: button_press("/"))
divide.grid(row=3,column=3)
decimal=Button(frame,text=".",height=4,width=9,font=34,command=lambda: button_press("."))
decimal.grid(row=3,column=2)
equal=Button(frame,text="=",height=4,width=9,font=34,command=equals)
equal.grid(row=3,column=1)
Clear=Button(window,text="Clear",height=4,width=50,font=34,command=clear)
Clear.pack()
window.mainloop()
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/harm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recomme) you can uncomment the following to ignore ten
